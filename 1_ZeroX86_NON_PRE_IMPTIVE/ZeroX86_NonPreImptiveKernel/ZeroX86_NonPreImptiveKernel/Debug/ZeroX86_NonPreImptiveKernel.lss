
ZeroX86_NonPreImptiveKernel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000102  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000134  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009a5  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ef  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000303  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001558  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049f  00000000  00000000  000015e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a6  00000000  00000000  00001a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00001d2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#include "ZeroX86.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	2a 97       	sbiw	r28, 0x0a	; 10
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61

	OS_TcbListT OS_RdyList;
	OS_TcbListT OS_DlyList;


	OS_ListCreate(&OS_RdyList);
  80:	ce 01       	movw	r24, r28
  82:	01 96       	adiw	r24, 0x01	; 1
  84:	0e 94 49 00 	call	0x92	; 0x92 <OS_ListCreate>

	OS_ListCreate(&OS_DlyList);
  88:	ce 01       	movw	r24, r28
  8a:	06 96       	adiw	r24, 0x06	; 6
  8c:	0e 94 49 00 	call	0x92	; 0x92 <OS_ListCreate>
  90:	ff cf       	rjmp	.-2      	; 0x90 <main+0x24>

00000092 <OS_ListCreate>:




OS_ReturnT OS_ListCreate(OS_TcbListT* TcbList)
{
  92:	fc 01       	movw	r30, r24
	if (V_NULL != TcbList)
  94:	89 2b       	or	r24, r25
  96:	39 f0       	breq	.+14     	; 0xa6 <OS_ListCreate+0x14>
	{
		TcbList->PtrCurrTask = V_NULL;
  98:	13 82       	std	Z+3, r1	; 0x03
  9a:	12 82       	std	Z+2, r1	; 0x02
		TcbList->PtrListHead = V_NULL;
  9c:	11 82       	std	Z+1, r1	; 0x01
  9e:	10 82       	st	Z, r1
		TcbList->U8ListSize  = 0U;
  a0:	14 82       	std	Z+4, r1	; 0x04
	} 
	else
	{
		return OS_ERR_INV_PARAMS;
	}
	return OS_ERR_NO;
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	08 95       	ret
		TcbList->PtrListHead = V_NULL;
		TcbList->U8ListSize  = 0U;
	} 
	else
	{
		return OS_ERR_INV_PARAMS;
  a6:	81 e0       	ldi	r24, 0x01	; 1
	}
	return OS_ERR_NO;
}
  a8:	08 95       	ret

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
