
timers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  00000bf0  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bf0  00000000  00000000  00000094  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b3  00800154  00800154  00000cd8  2**0
                  ALLOC
  3 .noinit       00000000  00800207  00800207  00000cd8  2**0
                  CONTENTS
  4 .eeprom       00000000  00810000  00810000  00000cd8  2**0
                  CONTENTS
  5 .debug_aranges 00000014  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000000fe  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000064d  00000000  00000000  00000dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000132  00000000  00000000  00001437  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000001d7  00000000  00000000  00001569  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fe  00000000  00000000  00001740  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c
   4:	0c 94 61 00 	jmp	0xc2
   8:	0c 94 61 00 	jmp	0xc2
   c:	0c 94 61 00 	jmp	0xc2
  10:	0c 94 61 00 	jmp	0xc2
  14:	0c 94 61 00 	jmp	0xc2
  18:	0c 94 61 00 	jmp	0xc2
  1c:	0c 94 61 00 	jmp	0xc2
  20:	0c 94 61 00 	jmp	0xc2
  24:	0c 94 61 00 	jmp	0xc2
  28:	0c 94 61 00 	jmp	0xc2
  2c:	0c 94 61 00 	jmp	0xc2
  30:	0c 94 61 00 	jmp	0xc2
  34:	0c 94 61 00 	jmp	0xc2
  38:	0c 94 61 00 	jmp	0xc2
  3c:	0c 94 63 00 	jmp	0xc6
  40:	0c 94 61 00 	jmp	0xc2
  44:	0c 94 61 00 	jmp	0xc2
  48:	0c 94 61 00 	jmp	0xc2
  4c:	0c 94 61 00 	jmp	0xc2
  50:	0c 94 61 00 	jmp	0xc2
  54:	0c 94 61 00 	jmp	0xc2
  58:	0c 94 61 00 	jmp	0xc2
  5c:	0c 94 61 00 	jmp	0xc2
  60:	0c 94 61 00 	jmp	0xc2
  64:	0c 94 61 00 	jmp	0xc2
  68:	0c 94 61 00 	jmp	0xc2
  6c:	0c 94 61 00 	jmp	0xc2
  70:	0c 94 61 00 	jmp	0xc2
  74:	0c 94 61 00 	jmp	0xc2
  78:	0c 94 61 00 	jmp	0xc2
  7c:	0c 94 61 00 	jmp	0xc2
  80:	0c 94 61 00 	jmp	0xc2
  84:	0c 94 61 00 	jmp	0xc2
  88:	0c 94 61 00 	jmp	0xc2

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ef       	ldi	r30, 0xF0	; 240
  a0:	fb e0       	ldi	r31, 0x0B	; 11
  a2:	02 c0       	rjmp	.+4      	; 0xa8

000000a4 <.do_copy_data_loop>:
  a4:	05 90       	lpm	r0, Z+
  a6:	0d 92       	st	X+, r0

000000a8 <.do_copy_data_start>:
  a8:	a4 35       	cpi	r26, 0x54	; 84
  aa:	b1 07       	cpc	r27, r17
  ac:	d9 f7       	brne	.-10     	; 0xa4

000000ae <__do_clear_bss>:
  ae:	12 e0       	ldi	r17, 0x02	; 2
  b0:	a4 e5       	ldi	r26, 0x54	; 84
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	01 c0       	rjmp	.+2      	; 0xb8

000000b6 <.do_clear_bss_loop>:
  b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
  b8:	a7 30       	cpi	r26, 0x07	; 7
  ba:	b1 07       	cpc	r27, r17
  bc:	e1 f7       	brne	.-8      	; 0xb6
  be:	0c 94 3d 01 	jmp	0x27a

000000c2 <__bad_interrupt>:
  c2:	0c 94 00 00 	jmp	0x0

000000c6 <__vector_15>:
 *	The example project is setup for an ATmega64 devie running at 16 Mhz.
 *	
 */
//--------------------------------------------------------------------------------
SIGNAL(SIG_OUTPUT_COMPARE0) {
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
	uSMARTX_Tick();		
  e8:	0e 94 5f 03 	call	0x6be
  ec:	ff 91       	pop	r31
  ee:	ef 91       	pop	r30
  f0:	bf 91       	pop	r27
  f2:	af 91       	pop	r26
  f4:	9f 91       	pop	r25
  f6:	8f 91       	pop	r24
  f8:	7f 91       	pop	r23
  fa:	6f 91       	pop	r22
  fc:	5f 91       	pop	r21
  fe:	4f 91       	pop	r20
 100:	3f 91       	pop	r19
 102:	2f 91       	pop	r18
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <KeyFxn>:
}
//--------------------------------------------------------------------------------
TSK_CREATE(TSK_LED);
TSK_CREATE(TSK_KESYSCAN);
TSK_CREATE(TSK_SYSTEM);

MBX_CREATE(SYS_EVENT_MBX, 5, 1);

TMR_CREATE(KEY_TIMER);
//--------------------------------------------------------------------------------
/*	This is a timer callback function and its executed 1 second after the key has been pressed.
 *	The key ID is passed thrue the ucEvent argument.
 */
STATUS KeyFxn(uint8 ucEvent, void *pArg1, void *pArg2) {
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	21 97       	sbiw	r28, 0x01	; 1
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
	uint8 ucSysEvent = 2;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	89 83       	std	Y+1, r24	; 0x01
	
	/* This function is called from the uSmartX_Tick() context. In other words this function
	 * is called from the interrupt service routine, thus we must call the MBX_Post() system call
	 * with timeout parameter 0.
	 */
	MBX_Post(&SYS_EVENT_MBX, &ucSysEvent, 0);
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	50 e0       	ldi	r21, 0x00	; 0
 12a:	be 01       	movw	r22, r28
 12c:	6f 5f       	subi	r22, 0xFF	; 255
 12e:	7f 4f       	sbci	r23, 0xFF	; 255
 130:	8c e3       	ldi	r24, 0x3C	; 60
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 a1 04 	call	0x942
	return SYS_OK;
}
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	21 96       	adiw	r28, 0x01	; 1
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <TSK_LedHandler>:
//--------------------------------------------------------------------------------
/*	This task takes care of the system hear beat led. It simply toggles a led and after
 * 	that it sleeps for 500ms.
 */
STATUS TSK_LedHandler(STATUS ucEvent) {
	static uint8 bBlink = 1;
	
	if( bBlink )
 14e:	90 91 52 01 	lds	r25, 0x0152
 152:	99 23       	and	r25, r25
 154:	11 f0       	breq	.+4      	; 0x15a
		PORTA |= (1 << PORTA0);
 156:	d8 9a       	sbi	0x1b, 0	; 27
 158:	01 c0       	rjmp	.+2      	; 0x15c
	else
		PORTA &= ~(1 << PORTA0);
 15a:	d8 98       	cbi	0x1b, 0	; 27
		
	bBlink ^= 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	98 27       	eor	r25, r24
 160:	90 93 52 01 	sts	0x0152, r25
	
	/*	We want this task to sleep, thus calling the function with the self handler. Self handler is returned
	 * 	by the TSK_Self() system call.
	 */
	TSK_Sleep(TSK_Self(), 500);
 164:	0e 94 5b 01 	call	0x2b6
 168:	64 ef       	ldi	r22, 0xF4	; 244
 16a:	71 e0       	ldi	r23, 0x01	; 1
 16c:	0e 94 45 03 	call	0x68a
	return SYS_OK;	
}
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	08 95       	ret

00000176 <TSK_KeyScan>:
//--------------------------------------------------------------------------------

STATUS TSK_KeyScan(STATUS ucEvent) {
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	0f 93       	push	r16
 180:	1f 93       	push	r17
	static uint8 ucKeyPressCount = 0;
	static uint8 ucSysEvent;
			
	if( ucKeyPressCount == 5 ) {
 182:	80 91 54 01 	lds	r24, 0x0154
 186:	85 30       	cpi	r24, 0x05	; 5
 188:	f1 f4       	brne	.+60     	; 0x1c6
		ucKeyPressCount++;
 18a:	8f 5f       	subi	r24, 0xFF	; 255
 18c:	80 93 54 01 	sts	0x0154, r24
		ucSysEvent = 1;
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	d9 2e       	mov	r13, r25
 194:	d0 92 55 01 	sts	0x0155, r13
		
		/* After the key has been pressed post a message to the system task
		 * signalling the key event. Note that we pass the pointer to the message
		 * to the system call. The pointer must be global or static type as shown in this example.
		 */
		MBX_Post(&SYS_EVENT_MBX, &ucSysEvent, 0);
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	65 e5       	ldi	r22, 0x55	; 85
 19e:	71 e0       	ldi	r23, 0x01	; 1
 1a0:	8c e3       	ldi	r24, 0x3C	; 60
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 a1 04 	call	0x942
		
		/* Start a key timer. The timer will elapse after 1s. The KeyFxn() callback function will be executed
		 * receiving the value 1 as the entry argument. The timer will run in one-shot mode.
		 */	
		TMR_Start(&KEY_TIMER, 1000, &KeyFxn, 1, 0, 0, TMR_ONE_SHOT);
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	c8 2e       	mov	r12, r24
 1ac:	ee 24       	eor	r14, r14
 1ae:	ff 24       	eor	r15, r15
 1b0:	87 01       	movw	r16, r14
 1b2:	2d 2d       	mov	r18, r13
 1b4:	47 e8       	ldi	r20, 0x87	; 135
 1b6:	50 e0       	ldi	r21, 0x00	; 0
 1b8:	68 ee       	ldi	r22, 0xE8	; 232
 1ba:	73 e0       	ldi	r23, 0x03	; 3
 1bc:	89 ee       	ldi	r24, 0xE9	; 233
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 08 03 	call	0x610
 1c4:	0c c0       	rjmp	.+24     	; 0x1de
	}
	else if( PINF & (1 << PORTF3) ) {
 1c6:	03 9b       	sbis	0x00, 3	; 0
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0
		ucKeyPressCount = 0;
 1ca:	10 92 54 01 	sts	0x0154, r1
 1ce:	07 c0       	rjmp	.+14     	; 0x1de
	}
	else if( !(PINF & (1 << PORTF3)) ) {
 1d0:	03 99       	sbic	0x00, 3	; 0
 1d2:	05 c0       	rjmp	.+10     	; 0x1de
		if( ucKeyPressCount < 5 ) {
 1d4:	85 30       	cpi	r24, 0x05	; 5
 1d6:	18 f4       	brcc	.+6      	; 0x1de
			ucKeyPressCount++;
 1d8:	8f 5f       	subi	r24, 0xFF	; 255
 1da:	80 93 54 01 	sts	0x0154, r24
		}			
	}
	
	/* Key scanning period is 50 ms. */
	TSK_Sleep(TSK_Self(), 50);		
 1de:	0e 94 5b 01 	call	0x2b6
 1e2:	62 e3       	ldi	r22, 0x32	; 50
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	0e 94 45 03 	call	0x68a
	return SYS_OK;
}
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	cf 90       	pop	r12
 1fa:	08 95       	ret

000001fc <TSK_System>:
//--------------------------------------------------------------------------------
/*	The system task processes events from other tasks and timers and it also does some
 *	periodic processing.
 */
STATUS TSK_System(STATUS ucEvent) {
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	21 97       	sbiw	r28, 0x01	; 1
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	f8 94       	cli
 20a:	de bf       	out	0x3e, r29	; 62
 20c:	0f be       	out	0x3f, r0	; 63
 20e:	cd bf       	out	0x3d, r28	; 61
	uint8 ucSysEvent;
	static uint32 ulPeriodicAnchor = 0;
	
	if( MBX_Pend(&SYS_EVENT_MBX, &ucSysEvent, 100) == SYS_OK ) {
 210:	44 e6       	ldi	r20, 0x64	; 100
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	be 01       	movw	r22, r28
 216:	6f 5f       	subi	r22, 0xFF	; 255
 218:	7f 4f       	sbci	r23, 0xFF	; 255
 21a:	8c e3       	ldi	r24, 0x3C	; 60
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 12 05 	call	0xa24
		
		switch(ucSysEvent) {
			case 1:
				/* Key has been pressed. Process the event here. */
				break;
			
			case 2:
				/* One second after key has been pressed has elapsed. Process the event here. */
				break;
				
			default:
				break;	
		}
	}
	
	/* This is an example how periodic processing with the TMR_GetTicks() system call and a timer anchor.
	 * In this particular example the watchdog is kickeg every 5s.
	 */
	if(TMR_GetTicks() - ulPeriodicAnchor > 5000 ) {
 222:	0e 94 b8 01 	call	0x370
 226:	dc 01       	movw	r26, r24
 228:	cb 01       	movw	r24, r22
 22a:	20 91 56 01 	lds	r18, 0x0156
 22e:	30 91 57 01 	lds	r19, 0x0157
 232:	40 91 58 01 	lds	r20, 0x0158
 236:	50 91 59 01 	lds	r21, 0x0159
 23a:	82 1b       	sub	r24, r18
 23c:	93 0b       	sbc	r25, r19
 23e:	a4 0b       	sbc	r26, r20
 240:	b5 0b       	sbc	r27, r21
 242:	89 58       	subi	r24, 0x89	; 137
 244:	93 41       	sbci	r25, 0x13	; 19
 246:	a0 40       	sbci	r26, 0x00	; 0
 248:	b0 40       	sbci	r27, 0x00	; 0
 24a:	60 f0       	brcs	.+24     	; 0x264
		/* Kick watchdog. */
		//KickWdog();
		
		/* Re-trigger periodic anchor. */
		ulPeriodicAnchor = TMR_GetTicks();
 24c:	0e 94 b8 01 	call	0x370
 250:	dc 01       	movw	r26, r24
 252:	cb 01       	movw	r24, r22
 254:	80 93 56 01 	sts	0x0156, r24
 258:	90 93 57 01 	sts	0x0157, r25
 25c:	a0 93 58 01 	sts	0x0158, r26
 260:	b0 93 59 01 	sts	0x0159, r27
	}	
	return SYS_OK;
}
 264:	80 e0       	ldi	r24, 0x00	; 0
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	21 96       	adiw	r28, 0x01	; 1
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	08 95       	ret

0000027a <main>:
//--------------------------------------------------------------------------------
/*	Task initialisation table must be properly initialized. In this example
 *	all task have equal priority and will be scheduled in round robin fashion.
 */
task_entry_t uSmartXTaskTable[] = {
	{&TSK_LedHandler,	&TSK_LED, 		1, "LED"},
	{&TSK_KeyScan, 		&TSK_KESYSCAN, 	1, "KEYSCAN"},
	{&TSK_System, 		&TSK_SYSTEM, 	1, "SYSTEM"},
	{0,0,0,""}
};
//--------------------------------------------------------------------------------
int main(void) {
 27a:	cf ef       	ldi	r28, 0xFF	; 255
 27c:	d0 e1       	ldi	r29, 0x10	; 16
 27e:	de bf       	out	0x3e, r29	; 62
 280:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	
	/* Init System Timer to fire interrupts at 1ms */
	OCR0		= 125;	  		 			// set output compare match register, timer tick 1ms
 282:	8d e7       	ldi	r24, 0x7D	; 125
 284:	81 bf       	out	0x31, r24	; 49
	TCCR0		= (1 << WGM01) + (1 << CS02) + (1 << CS00);	//clear on compare match mode, Fclk/128 
 286:	8d e0       	ldi	r24, 0x0D	; 13
 288:	83 bf       	out	0x33, r24	; 51
	TIMSK		|= (1 << OCIE0); // enable output compare 2 interrupt
 28a:	87 b7       	in	r24, 0x37	; 55
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	87 bf       	out	0x37, r24	; 55
	TCNT0		= 0x00;	 		 // clear timer2 register
 290:	12 be       	out	0x32, r1	; 50
			
	MBX_Init(&SYS_EVENT_MBX);
 292:	8c e3       	ldi	r24, 0x3C	; 60
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 5d 04 	call	0x8ba
		
	uSMARTX_Init(uSmartXTaskTable);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 6b 02 	call	0x4d6
	
	/* Enable interrupts. */
	INT_Enable();
 2a2:	0e 94 ea 05 	call	0xbd4
	
	while(1) {	
		if(uSMARTX_Scheduler() == SYS_ERROR)
 2a6:	0e 94 0a 02 	call	0x414
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	e1 f7       	brne	.-8      	; 0x2a6
			break;
	}

	/* Handle error here. */

	return 0;
} 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0c 94 f7 05 	jmp	0xbee

000002b6 <TSK_Self>:
 2b6:	80 91 05 02 	lds	r24, 0x0205
 2ba:	90 91 06 02 	lds	r25, 0x0206
 2be:	08 95       	ret

000002c0 <timer_dequeue>:
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	fc 01       	movw	r30, r24
 2c6:	87 85       	ldd	r24, Z+15	; 0x0f
 2c8:	87 7f       	andi	r24, 0xF7	; 247
 2ca:	87 87       	std	Z+15, r24	; 0x0f
 2cc:	a0 81       	ld	r26, Z
 2ce:	b1 81       	ldd	r27, Z+1	; 0x01
 2d0:	10 97       	sbiw	r26, 0x00	; 0
 2d2:	49 f0       	breq	.+18     	; 0x2e6
 2d4:	ed 01       	movw	r28, r26
 2d6:	8e 81       	ldd	r24, Y+6	; 0x06
 2d8:	9f 81       	ldd	r25, Y+7	; 0x07
 2da:	26 81       	ldd	r18, Z+6	; 0x06
 2dc:	37 81       	ldd	r19, Z+7	; 0x07
 2de:	82 0f       	add	r24, r18
 2e0:	93 1f       	adc	r25, r19
 2e2:	8e 83       	std	Y+6, r24	; 0x06
 2e4:	9f 83       	std	Y+7, r25	; 0x07
 2e6:	bf 01       	movw	r22, r30
 2e8:	89 ef       	ldi	r24, 0xF9	; 249
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	0e 94 38 04 	call	0x870
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <remove_timeout>:
 2f6:	fc 01       	movw	r30, r24
 2f8:	89 2b       	or	r24, r25
 2fa:	11 f0       	breq	.+4      	; 0x300
 2fc:	87 85       	ldd	r24, Z+15	; 0x0f
 2fe:	83 ff       	sbrs	r24, 3
 300:	08 95       	ret
 302:	cf 01       	movw	r24, r30
 304:	0e 94 60 01 	call	0x2c0
 308:	08 95       	ret

0000030a <TSK_Suspend>:
 30a:	0f 93       	push	r16
 30c:	1f 93       	push	r17
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	ec 01       	movw	r28, r24
 314:	0e 94 e7 05 	call	0xbce
 318:	8c 01       	movw	r16, r24
 31a:	82 e0       	ldi	r24, 0x02	; 2
 31c:	8c 83       	std	Y+4, r24	; 0x04
 31e:	8c 85       	ldd	r24, Y+12	; 0x0c
 320:	9d 85       	ldd	r25, Y+13	; 0x0d
 322:	00 97       	sbiw	r24, 0x00	; 0
 324:	39 f0       	breq	.+14     	; 0x334
 326:	be 01       	movw	r22, r28
 328:	0e 94 38 04 	call	0x870
 32c:	ce 01       	movw	r24, r28
 32e:	0e 96       	adiw	r24, 0x0e	; 14
 330:	0e 94 7b 01 	call	0x2f6
 334:	c8 01       	movw	r24, r16
 336:	0e 94 eb 05 	call	0xbd6
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	08 95       	ret

00000344 <TMR_Stop>:
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	ec 01       	movw	r28, r24
 34e:	0e 94 e7 05 	call	0xbce
 352:	8c 01       	movw	r16, r24
 354:	8f 85       	ldd	r24, Y+15	; 0x0f
 356:	83 ff       	sbrs	r24, 3
 358:	03 c0       	rjmp	.+6      	; 0x360
 35a:	ce 01       	movw	r24, r28
 35c:	0e 94 60 01 	call	0x2c0
 360:	c8 01       	movw	r24, r16
 362:	0e 94 eb 05 	call	0xbd6
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	08 95       	ret

00000370 <TMR_GetTicks>:
 370:	80 91 01 02 	lds	r24, 0x0201
 374:	90 91 02 02 	lds	r25, 0x0202
 378:	a0 91 03 02 	lds	r26, 0x0203
 37c:	b0 91 04 02 	lds	r27, 0x0204
 380:	bc 01       	movw	r22, r24
 382:	cd 01       	movw	r24, r26
 384:	08 95       	ret

00000386 <priority_enqueue_tsk>:
 386:	dc 01       	movw	r26, r24
 388:	fc 01       	movw	r30, r24
 38a:	25 81       	ldd	r18, Z+5	; 0x05
 38c:	80 91 fd 01 	lds	r24, 0x01FD
 390:	90 91 fe 01 	lds	r25, 0x01FE
 394:	00 97       	sbiw	r24, 0x00	; 0
 396:	91 f0       	breq	.+36     	; 0x3bc
 398:	fc 01       	movw	r30, r24
 39a:	85 81       	ldd	r24, Z+5	; 0x05
 39c:	28 17       	cp	r18, r24
 39e:	50 f0       	brcs	.+20     	; 0x3b4
 3a0:	80 81       	ld	r24, Z
 3a2:	91 81       	ldd	r25, Z+1	; 0x01
 3a4:	00 97       	sbiw	r24, 0x00	; 0
 3a6:	c1 f7       	brne	.-16     	; 0x398
 3a8:	bd 01       	movw	r22, r26
 3aa:	8d ef       	ldi	r24, 0xFD	; 253
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	0e 94 fe 03 	call	0x7fc
 3b2:	08 95       	ret
 3b4:	82 81       	ldd	r24, Z+2	; 0x02
 3b6:	93 81       	ldd	r25, Z+3	; 0x03
 3b8:	89 2b       	or	r24, r25
 3ba:	31 f4       	brne	.+12     	; 0x3c8
 3bc:	bd 01       	movw	r22, r26
 3be:	8d ef       	ldi	r24, 0xFD	; 253
 3c0:	91 e0       	ldi	r25, 0x01	; 1
 3c2:	0e 94 ce 03 	call	0x79c
 3c6:	08 95       	ret
 3c8:	bd 01       	movw	r22, r26
 3ca:	cf 01       	movw	r24, r30
 3cc:	0e 94 eb 03 	call	0x7d6
 3d0:	08 95       	ret

000003d2 <TSK_Resume>:
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ec 01       	movw	r28, r24
 3dc:	0e 94 e7 05 	call	0xbce
 3e0:	8c 01       	movw	r16, r24
 3e2:	8c 85       	ldd	r24, Y+12	; 0x0c
 3e4:	9d 85       	ldd	r25, Y+13	; 0x0d
 3e6:	00 97       	sbiw	r24, 0x00	; 0
 3e8:	39 f0       	breq	.+14     	; 0x3f8
 3ea:	be 01       	movw	r22, r28
 3ec:	0e 94 38 04 	call	0x870
 3f0:	ce 01       	movw	r24, r28
 3f2:	0e 96       	adiw	r24, 0x0e	; 14
 3f4:	0e 94 7b 01 	call	0x2f6
 3f8:	8c 81       	ldd	r24, Y+4	; 0x04
 3fa:	8d 7f       	andi	r24, 0xFD	; 253
 3fc:	8c 83       	std	Y+4, r24	; 0x04
 3fe:	ce 01       	movw	r24, r28
 400:	0e 94 c3 01 	call	0x386
 404:	c8 01       	movw	r24, r16
 406:	0e 94 eb 05 	call	0xbd6
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	1f 91       	pop	r17
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <uSMARTX_Scheduler>:
 414:	cf 92       	push	r12
 416:	df 92       	push	r13
 418:	ef 92       	push	r14
 41a:	ff 92       	push	r15
 41c:	0f 93       	push	r16
 41e:	1f 93       	push	r17
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	0e 94 e7 05 	call	0xbce
 428:	8c 01       	movw	r16, r24
 42a:	8d ef       	ldi	r24, 0xFD	; 253
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 1c 04 	call	0x838
 432:	ec 01       	movw	r28, r24
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	d9 f1       	breq	.+118    	; 0x4ae
 438:	90 93 06 02 	sts	0x0206, r25
 43c:	80 93 05 02 	sts	0x0205, r24
 440:	ce 80       	ldd	r12, Y+6	; 0x06
 442:	df 80       	ldd	r13, Y+7	; 0x07
 444:	c8 01       	movw	r24, r16
 446:	0e 94 eb 05 	call	0xbd6
 44a:	e0 90 01 02 	lds	r14, 0x0201
 44e:	f0 90 02 02 	lds	r15, 0x0202
 452:	00 91 03 02 	lds	r16, 0x0203
 456:	10 91 04 02 	lds	r17, 0x0204
 45a:	e8 85       	ldd	r30, Y+8	; 0x08
 45c:	f9 85       	ldd	r31, Y+9	; 0x09
 45e:	c6 01       	movw	r24, r12
 460:	09 95       	icall
 462:	6c 01       	movw	r12, r24
 464:	80 91 01 02 	lds	r24, 0x0201
 468:	90 91 02 02 	lds	r25, 0x0202
 46c:	a0 91 03 02 	lds	r26, 0x0203
 470:	b0 91 04 02 	lds	r27, 0x0204
 474:	9c 01       	movw	r18, r24
 476:	2e 19       	sub	r18, r14
 478:	3f 09       	sbc	r19, r15
 47a:	8e 8d       	ldd	r24, Y+30	; 0x1e
 47c:	9f 8d       	ldd	r25, Y+31	; 0x1f
 47e:	82 17       	cp	r24, r18
 480:	93 07       	cpc	r25, r19
 482:	90 f0       	brcs	.+36     	; 0x4a8
 484:	88 a1       	ldd	r24, Y+32	; 0x20
 486:	99 a1       	ldd	r25, Y+33	; 0x21
 488:	28 17       	cp	r18, r24
 48a:	39 07       	cpc	r19, r25
 48c:	10 f4       	brcc	.+4      	; 0x492
 48e:	28 a3       	std	Y+32, r18	; 0x20
 490:	39 a3       	std	Y+33, r19	; 0x21
 492:	0e 94 e7 05 	call	0xbce
 496:	8c 01       	movw	r16, r24
 498:	88 e0       	ldi	r24, 0x08	; 8
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	8e 83       	std	Y+6, r24	; 0x06
 49e:	9f 83       	std	Y+7, r25	; 0x07
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	88 23       	and	r24, r24
 4a4:	59 f4       	brne	.+22     	; 0x4bc
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6
 4a8:	2e 8f       	std	Y+30, r18	; 0x1e
 4aa:	3f 8f       	std	Y+31, r19	; 0x1f
 4ac:	eb cf       	rjmp	.-42     	; 0x484
 4ae:	82 e0       	ldi	r24, 0x02	; 2
 4b0:	c8 2e       	mov	r12, r24
 4b2:	d1 2c       	mov	r13, r1
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc
 4b6:	ce 01       	movw	r24, r28
 4b8:	0e 94 c3 01 	call	0x386
 4bc:	c8 01       	movw	r24, r16
 4be:	0e 94 eb 05 	call	0xbd6
 4c2:	c6 01       	movw	r24, r12
 4c4:	df 91       	pop	r29
 4c6:	cf 91       	pop	r28
 4c8:	1f 91       	pop	r17
 4ca:	0f 91       	pop	r16
 4cc:	ff 90       	pop	r15
 4ce:	ef 90       	pop	r14
 4d0:	df 90       	pop	r13
 4d2:	cf 90       	pop	r12
 4d4:	08 95       	ret

000004d6 <uSMARTX_Init>:
 4d6:	ff 92       	push	r15
 4d8:	0f 93       	push	r16
 4da:	1f 93       	push	r17
 4dc:	cf 93       	push	r28
 4de:	df 93       	push	r29
 4e0:	ec 01       	movw	r28, r24
 4e2:	10 92 fa 01 	sts	0x01FA, r1
 4e6:	10 92 f9 01 	sts	0x01F9, r1
 4ea:	10 92 01 02 	sts	0x0201, r1
 4ee:	10 92 02 02 	sts	0x0202, r1
 4f2:	10 92 03 02 	sts	0x0203, r1
 4f6:	10 92 04 02 	sts	0x0204, r1
 4fa:	ea 81       	ldd	r30, Y+2	; 0x02
 4fc:	fb 81       	ldd	r31, Y+3	; 0x03
 4fe:	30 97       	sbiw	r30, 0x00	; 0
 500:	d1 f0       	breq	.+52     	; 0x536
 502:	0f ef       	ldi	r16, 0xFF	; 255
 504:	1f ef       	ldi	r17, 0xFF	; 255
 506:	94 e0       	ldi	r25, 0x04	; 4
 508:	f9 2e       	mov	r15, r25
 50a:	14 82       	std	Z+4, r1	; 0x04
 50c:	8c 81       	ldd	r24, Y+4	; 0x04
 50e:	85 83       	std	Z+5, r24	; 0x05
 510:	88 81       	ld	r24, Y
 512:	99 81       	ldd	r25, Y+1	; 0x01
 514:	80 87       	std	Z+8, r24	; 0x08
 516:	91 87       	std	Z+9, r25	; 0x09
 518:	16 8e       	std	Z+30, r1	; 0x1e
 51a:	17 8e       	std	Z+31, r1	; 0x1f
 51c:	00 a3       	std	Z+32, r16	; 0x20
 51e:	11 a3       	std	Z+33, r17	; 0x21
 520:	12 a2       	std	Z+34, r1	; 0x22
 522:	13 a2       	std	Z+35, r1	; 0x23
 524:	f5 8e       	std	Z+29, r15	; 0x1d
 526:	cf 01       	movw	r24, r30
 528:	0e 94 c3 01 	call	0x386
 52c:	2f 96       	adiw	r28, 0x0f	; 15
 52e:	ea 81       	ldd	r30, Y+2	; 0x02
 530:	fb 81       	ldd	r31, Y+3	; 0x03
 532:	30 97       	sbiw	r30, 0x00	; 0
 534:	51 f7       	brne	.-44     	; 0x50a
 536:	80 91 fd 01 	lds	r24, 0x01FD
 53a:	90 91 fe 01 	lds	r25, 0x01FE
 53e:	90 93 06 02 	sts	0x0206, r25
 542:	80 93 05 02 	sts	0x0205, r24
 546:	df 91       	pop	r29
 548:	cf 91       	pop	r28
 54a:	1f 91       	pop	r17
 54c:	0f 91       	pop	r16
 54e:	ff 90       	pop	r15
 550:	08 95       	ret

00000552 <timer_enqueue>:
 552:	cf 93       	push	r28
 554:	df 93       	push	r29
 556:	dc 01       	movw	r26, r24
 558:	ec 01       	movw	r28, r24
 55a:	8f 85       	ldd	r24, Y+15	; 0x0f
 55c:	88 60       	ori	r24, 0x08	; 8
 55e:	8f 87       	std	Y+15, r24	; 0x0f
 560:	2c 81       	ldd	r18, Y+4	; 0x04
 562:	3d 81       	ldd	r19, Y+5	; 0x05
 564:	e0 91 f9 01 	lds	r30, 0x01F9
 568:	f0 91 fa 01 	lds	r31, 0x01FA
 56c:	30 97       	sbiw	r30, 0x00	; 0
 56e:	19 f1       	breq	.+70     	; 0x5b6
 570:	86 81       	ldd	r24, Z+6	; 0x06
 572:	97 81       	ldd	r25, Z+7	; 0x07
 574:	28 17       	cp	r18, r24
 576:	39 07       	cpc	r19, r25
 578:	60 f0       	brcs	.+24     	; 0x592
 57a:	28 1b       	sub	r18, r24
 57c:	39 0b       	sbc	r19, r25
 57e:	80 81       	ld	r24, Z
 580:	91 81       	ldd	r25, Z+1	; 0x01
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	09 f1       	breq	.+66     	; 0x5c8
 586:	fc 01       	movw	r30, r24
 588:	86 81       	ldd	r24, Z+6	; 0x06
 58a:	97 81       	ldd	r25, Z+7	; 0x07
 58c:	28 17       	cp	r18, r24
 58e:	39 07       	cpc	r19, r25
 590:	a0 f7       	brcc	.-24     	; 0x57a
 592:	ed 01       	movw	r28, r26
 594:	2e 83       	std	Y+6, r18	; 0x06
 596:	3f 83       	std	Y+7, r19	; 0x07
 598:	86 81       	ldd	r24, Z+6	; 0x06
 59a:	97 81       	ldd	r25, Z+7	; 0x07
 59c:	82 1b       	sub	r24, r18
 59e:	93 0b       	sbc	r25, r19
 5a0:	86 83       	std	Z+6, r24	; 0x06
 5a2:	97 83       	std	Z+7, r25	; 0x07
 5a4:	82 81       	ldd	r24, Z+2	; 0x02
 5a6:	93 81       	ldd	r25, Z+3	; 0x03
 5a8:	89 2b       	or	r24, r25
 5aa:	41 f0       	breq	.+16     	; 0x5bc
 5ac:	bd 01       	movw	r22, r26
 5ae:	cf 01       	movw	r24, r30
 5b0:	0e 94 eb 03 	call	0x7d6
 5b4:	11 c0       	rjmp	.+34     	; 0x5d8
 5b6:	ed 01       	movw	r28, r26
 5b8:	2e 83       	std	Y+6, r18	; 0x06
 5ba:	3f 83       	std	Y+7, r19	; 0x07
 5bc:	bd 01       	movw	r22, r26
 5be:	89 ef       	ldi	r24, 0xF9	; 249
 5c0:	91 e0       	ldi	r25, 0x01	; 1
 5c2:	0e 94 ce 03 	call	0x79c
 5c6:	08 c0       	rjmp	.+16     	; 0x5d8
 5c8:	fd 01       	movw	r30, r26
 5ca:	26 83       	std	Z+6, r18	; 0x06
 5cc:	37 83       	std	Z+7, r19	; 0x07
 5ce:	bd 01       	movw	r22, r26
 5d0:	89 ef       	ldi	r24, 0xF9	; 249
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 fe 03 	call	0x7fc
 5d8:	df 91       	pop	r29
 5da:	cf 91       	pop	r28
 5dc:	08 95       	ret

000005de <TMR_ReStart>:
 5de:	0f 93       	push	r16
 5e0:	1f 93       	push	r17
 5e2:	cf 93       	push	r28
 5e4:	df 93       	push	r29
 5e6:	ec 01       	movw	r28, r24
 5e8:	0e 94 e7 05 	call	0xbce
 5ec:	8c 01       	movw	r16, r24
 5ee:	8f 85       	ldd	r24, Y+15	; 0x0f
 5f0:	83 ff       	sbrs	r24, 3
 5f2:	03 c0       	rjmp	.+6      	; 0x5fa
 5f4:	ce 01       	movw	r24, r28
 5f6:	0e 94 60 01 	call	0x2c0
 5fa:	ce 01       	movw	r24, r28
 5fc:	0e 94 a9 02 	call	0x552
 600:	c8 01       	movw	r24, r16
 602:	0e 94 eb 05 	call	0xbd6
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
 60e:	08 95       	ret

00000610 <TMR_Start>:
 610:	6f 92       	push	r6
 612:	7f 92       	push	r7
 614:	8f 92       	push	r8
 616:	9f 92       	push	r9
 618:	af 92       	push	r10
 61a:	bf 92       	push	r11
 61c:	cf 92       	push	r12
 61e:	df 92       	push	r13
 620:	ef 92       	push	r14
 622:	ff 92       	push	r15
 624:	0f 93       	push	r16
 626:	1f 93       	push	r17
 628:	cf 93       	push	r28
 62a:	df 93       	push	r29
 62c:	ec 01       	movw	r28, r24
 62e:	5b 01       	movw	r10, r22
 630:	4a 01       	movw	r8, r20
 632:	72 2e       	mov	r7, r18
 634:	6c 2c       	mov	r6, r12
 636:	0e 94 e7 05 	call	0xbce
 63a:	6c 01       	movw	r12, r24
 63c:	8f 85       	ldd	r24, Y+15	; 0x0f
 63e:	83 ff       	sbrs	r24, 3
 640:	04 c0       	rjmp	.+8      	; 0x64a
 642:	ce 01       	movw	r24, r28
 644:	0e 94 60 01 	call	0x2c0
 648:	8f 85       	ldd	r24, Y+15	; 0x0f
 64a:	ac 82       	std	Y+4, r10	; 0x04
 64c:	bd 82       	std	Y+5, r11	; 0x05
 64e:	88 86       	std	Y+8, r8	; 0x08
 650:	99 86       	std	Y+9, r9	; 0x09
 652:	7a 86       	std	Y+10, r7	; 0x0a
 654:	0b 87       	std	Y+11, r16	; 0x0b
 656:	1c 87       	std	Y+12, r17	; 0x0c
 658:	ed 86       	std	Y+13, r14	; 0x0d
 65a:	fe 86       	std	Y+14, r15	; 0x0e
 65c:	86 29       	or	r24, r6
 65e:	8f 87       	std	Y+15, r24	; 0x0f
 660:	ce 01       	movw	r24, r28
 662:	0e 94 a9 02 	call	0x552
 666:	c6 01       	movw	r24, r12
 668:	0e 94 eb 05 	call	0xbd6
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	bf 90       	pop	r11
 67e:	af 90       	pop	r10
 680:	9f 90       	pop	r9
 682:	8f 90       	pop	r8
 684:	7f 90       	pop	r7
 686:	6f 90       	pop	r6
 688:	08 95       	ret

0000068a <TSK_Sleep>:
 68a:	cf 92       	push	r12
 68c:	ef 92       	push	r14
 68e:	ff 92       	push	r15
 690:	0f 93       	push	r16
 692:	1f 93       	push	r17
 694:	fc 01       	movw	r30, r24
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	84 83       	std	Z+4, r24	; 0x04
 69a:	22 e0       	ldi	r18, 0x02	; 2
 69c:	c2 2e       	mov	r12, r18
 69e:	ee 24       	eor	r14, r14
 6a0:	ff 24       	eor	r15, r15
 6a2:	8f 01       	movw	r16, r30
 6a4:	20 e0       	ldi	r18, 0x00	; 0
 6a6:	4d eb       	ldi	r20, 0xBD	; 189
 6a8:	53 e0       	ldi	r21, 0x03	; 3
 6aa:	cf 01       	movw	r24, r30
 6ac:	0e 96       	adiw	r24, 0x0e	; 14
 6ae:	0e 94 08 03 	call	0x610
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	ff 90       	pop	r15
 6b8:	ef 90       	pop	r14
 6ba:	cf 90       	pop	r12
 6bc:	08 95       	ret

000006be <uSMARTX_Tick>:
 6be:	cf 93       	push	r28
 6c0:	df 93       	push	r29
 6c2:	c0 91 f9 01 	lds	r28, 0x01F9
 6c6:	d0 91 fa 01 	lds	r29, 0x01FA
 6ca:	80 91 01 02 	lds	r24, 0x0201
 6ce:	90 91 02 02 	lds	r25, 0x0202
 6d2:	a0 91 03 02 	lds	r26, 0x0203
 6d6:	b0 91 04 02 	lds	r27, 0x0204
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	a1 1d       	adc	r26, r1
 6de:	b1 1d       	adc	r27, r1
 6e0:	80 93 01 02 	sts	0x0201, r24
 6e4:	90 93 02 02 	sts	0x0202, r25
 6e8:	a0 93 03 02 	sts	0x0203, r26
 6ec:	b0 93 04 02 	sts	0x0204, r27
 6f0:	20 97       	sbiw	r28, 0x00	; 0
 6f2:	49 f1       	breq	.+82     	; 0x746
 6f4:	8e 81       	ldd	r24, Y+6	; 0x06
 6f6:	9f 81       	ldd	r25, Y+7	; 0x07
 6f8:	00 97       	sbiw	r24, 0x00	; 0
 6fa:	89 f0       	breq	.+34     	; 0x71e
 6fc:	01 97       	sbiw	r24, 0x01	; 1
 6fe:	8e 83       	std	Y+6, r24	; 0x06
 700:	9f 83       	std	Y+7, r25	; 0x07
 702:	21 c0       	rjmp	.+66     	; 0x746
 704:	ce 01       	movw	r24, r28
 706:	0e 94 a9 02 	call	0x552
 70a:	c0 91 f9 01 	lds	r28, 0x01F9
 70e:	d0 91 fa 01 	lds	r29, 0x01FA
 712:	20 97       	sbiw	r28, 0x00	; 0
 714:	c1 f0       	breq	.+48     	; 0x746
 716:	8e 81       	ldd	r24, Y+6	; 0x06
 718:	9f 81       	ldd	r25, Y+7	; 0x07
 71a:	89 2b       	or	r24, r25
 71c:	a1 f4       	brne	.+40     	; 0x746
 71e:	89 ef       	ldi	r24, 0xF9	; 249
 720:	91 e0       	ldi	r25, 0x01	; 1
 722:	0e 94 1c 04 	call	0x838
 726:	ec 01       	movw	r28, r24
 728:	8f 85       	ldd	r24, Y+15	; 0x0f
 72a:	87 7f       	andi	r24, 0xF7	; 247
 72c:	8f 87       	std	Y+15, r24	; 0x0f
 72e:	e8 85       	ldd	r30, Y+8	; 0x08
 730:	f9 85       	ldd	r31, Y+9	; 0x09
 732:	4d 85       	ldd	r20, Y+13	; 0x0d
 734:	5e 85       	ldd	r21, Y+14	; 0x0e
 736:	6b 85       	ldd	r22, Y+11	; 0x0b
 738:	7c 85       	ldd	r23, Y+12	; 0x0c
 73a:	8a 85       	ldd	r24, Y+10	; 0x0a
 73c:	09 95       	icall
 73e:	8f 85       	ldd	r24, Y+15	; 0x0f
 740:	80 ff       	sbrs	r24, 0
 742:	e3 cf       	rjmp	.-58     	; 0x70a
 744:	df cf       	rjmp	.-66     	; 0x704
 746:	df 91       	pop	r29
 748:	cf 91       	pop	r28
 74a:	08 95       	ret

0000074c <append_timeout>:
 74c:	9c 01       	movw	r18, r24
 74e:	8f ef       	ldi	r24, 0xFF	; 255
 750:	4f 3f       	cpi	r20, 0xFF	; 255
 752:	58 07       	cpc	r21, r24
 754:	89 f0       	breq	.+34     	; 0x778
 756:	f9 01       	movw	r30, r18
 758:	3e 96       	adiw	r30, 0x0e	; 14
 75a:	87 85       	ldd	r24, Z+15	; 0x0f
 75c:	82 60       	ori	r24, 0x02	; 2
 75e:	87 87       	std	Z+15, r24	; 0x0f
 760:	12 86       	std	Z+10, r1	; 0x0a
 762:	23 87       	std	Z+11, r18	; 0x0b
 764:	34 87       	std	Z+12, r19	; 0x0c
 766:	15 86       	std	Z+13, r1	; 0x0d
 768:	16 86       	std	Z+14, r1	; 0x0e
 76a:	44 83       	std	Z+4, r20	; 0x04
 76c:	55 83       	std	Z+5, r21	; 0x05
 76e:	60 87       	std	Z+8, r22	; 0x08
 770:	71 87       	std	Z+9, r23	; 0x09
 772:	cf 01       	movw	r24, r30
 774:	0e 94 a9 02 	call	0x552
 778:	08 95       	ret

0000077a <tsk_delay_clb>:
 77a:	fb 01       	movw	r30, r22
 77c:	85 e0       	ldi	r24, 0x05	; 5
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	86 83       	std	Z+6, r24	; 0x06
 782:	97 83       	std	Z+7, r25	; 0x07
 784:	14 82       	std	Z+4, r1	; 0x04
 786:	cb 01       	movw	r24, r22
 788:	0e 94 c3 01 	call	0x386
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	08 95       	ret

00000792 <get_curr_tsk>:
 792:	80 91 05 02 	lds	r24, 0x0205
 796:	90 91 06 02 	lds	r25, 0x0206
 79a:	08 95       	ret

0000079c <enqueue_top_object>:
 79c:	cf 93       	push	r28
 79e:	df 93       	push	r29
 7a0:	ec 01       	movw	r28, r24
 7a2:	db 01       	movw	r26, r22
 7a4:	88 81       	ld	r24, Y
 7a6:	99 81       	ldd	r25, Y+1	; 0x01
 7a8:	00 97       	sbiw	r24, 0x00	; 0
 7aa:	41 f0       	breq	.+16     	; 0x7bc
 7ac:	8d 93       	st	X+, r24
 7ae:	9c 93       	st	X, r25
 7b0:	11 97       	sbiw	r26, 0x01	; 1
 7b2:	e8 81       	ld	r30, Y
 7b4:	f9 81       	ldd	r31, Y+1	; 0x01
 7b6:	62 83       	std	Z+2, r22	; 0x02
 7b8:	73 83       	std	Z+3, r23	; 0x03
 7ba:	05 c0       	rjmp	.+10     	; 0x7c6
 7bc:	8d 93       	st	X+, r24
 7be:	9c 93       	st	X, r25
 7c0:	11 97       	sbiw	r26, 0x01	; 1
 7c2:	6a 83       	std	Y+2, r22	; 0x02
 7c4:	7b 83       	std	Y+3, r23	; 0x03
 7c6:	fd 01       	movw	r30, r26
 7c8:	12 82       	std	Z+2, r1	; 0x02
 7ca:	13 82       	std	Z+3, r1	; 0x03
 7cc:	a8 83       	st	Y, r26
 7ce:	b9 83       	std	Y+1, r27	; 0x01
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	08 95       	ret

000007d6 <enqueue_middle_object>:
 7d6:	cf 93       	push	r28
 7d8:	df 93       	push	r29
 7da:	fc 01       	movw	r30, r24
 7dc:	db 01       	movw	r26, r22
 7de:	82 81       	ldd	r24, Z+2	; 0x02
 7e0:	93 81       	ldd	r25, Z+3	; 0x03
 7e2:	ec 01       	movw	r28, r24
 7e4:	68 83       	st	Y, r22
 7e6:	79 83       	std	Y+1, r23	; 0x01
 7e8:	eb 01       	movw	r28, r22
 7ea:	8a 83       	std	Y+2, r24	; 0x02
 7ec:	9b 83       	std	Y+3, r25	; 0x03
 7ee:	62 83       	std	Z+2, r22	; 0x02
 7f0:	73 83       	std	Z+3, r23	; 0x03
 7f2:	ed 93       	st	X+, r30
 7f4:	fc 93       	st	X, r31
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	08 95       	ret

000007fc <enqueue_bottom_object>:
 7fc:	cf 93       	push	r28
 7fe:	df 93       	push	r29
 800:	ec 01       	movw	r28, r24
 802:	db 01       	movw	r26, r22
 804:	8a 81       	ldd	r24, Y+2	; 0x02
 806:	9b 81       	ldd	r25, Y+3	; 0x03
 808:	00 97       	sbiw	r24, 0x00	; 0
 80a:	49 f0       	breq	.+18     	; 0x81e
 80c:	fc 01       	movw	r30, r24
 80e:	60 83       	st	Z, r22
 810:	71 83       	std	Z+1, r23	; 0x01
 812:	8a 81       	ldd	r24, Y+2	; 0x02
 814:	9b 81       	ldd	r25, Y+3	; 0x03
 816:	fb 01       	movw	r30, r22
 818:	82 83       	std	Z+2, r24	; 0x02
 81a:	93 83       	std	Z+3, r25	; 0x03
 81c:	05 c0       	rjmp	.+10     	; 0x828
 81e:	fb 01       	movw	r30, r22
 820:	82 83       	std	Z+2, r24	; 0x02
 822:	93 83       	std	Z+3, r25	; 0x03
 824:	68 83       	st	Y, r22
 826:	79 83       	std	Y+1, r23	; 0x01
 828:	1d 92       	st	X+, r1
 82a:	1c 92       	st	X, r1
 82c:	11 97       	sbiw	r26, 0x01	; 1
 82e:	aa 83       	std	Y+2, r26	; 0x02
 830:	bb 83       	std	Y+3, r27	; 0x03
 832:	df 91       	pop	r29
 834:	cf 91       	pop	r28
 836:	08 95       	ret

00000838 <dequeue_top_object>:
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	dc 01       	movw	r26, r24
 83e:	cd 91       	ld	r28, X+
 840:	dc 91       	ld	r29, X
 842:	11 97       	sbiw	r26, 0x01	; 1
 844:	20 97       	sbiw	r28, 0x00	; 0
 846:	81 f0       	breq	.+32     	; 0x868
 848:	88 81       	ld	r24, Y
 84a:	99 81       	ldd	r25, Y+1	; 0x01
 84c:	00 97       	sbiw	r24, 0x00	; 0
 84e:	39 f4       	brne	.+14     	; 0x85e
 850:	8d 93       	st	X+, r24
 852:	9c 93       	st	X, r25
 854:	11 97       	sbiw	r26, 0x01	; 1
 856:	fd 01       	movw	r30, r26
 858:	82 83       	std	Z+2, r24	; 0x02
 85a:	93 83       	std	Z+3, r25	; 0x03
 85c:	05 c0       	rjmp	.+10     	; 0x868
 85e:	8d 93       	st	X+, r24
 860:	9c 93       	st	X, r25
 862:	fc 01       	movw	r30, r24
 864:	12 82       	std	Z+2, r1	; 0x02
 866:	13 82       	std	Z+3, r1	; 0x03
 868:	ce 01       	movw	r24, r28
 86a:	df 91       	pop	r29
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <dequeue_object>:
 870:	cf 93       	push	r28
 872:	df 93       	push	r29
 874:	ec 01       	movw	r28, r24
 876:	fb 01       	movw	r30, r22
 878:	a2 81       	ldd	r26, Z+2	; 0x02
 87a:	b3 81       	ldd	r27, Z+3	; 0x03
 87c:	10 97       	sbiw	r26, 0x00	; 0
 87e:	69 f0       	breq	.+26     	; 0x89a
 880:	80 81       	ld	r24, Z
 882:	91 81       	ldd	r25, Z+1	; 0x01
 884:	8d 93       	st	X+, r24
 886:	9c 93       	st	X, r25
 888:	11 97       	sbiw	r26, 0x01	; 1
 88a:	01 90       	ld	r0, Z+
 88c:	f0 81       	ld	r31, Z
 88e:	e0 2d       	mov	r30, r0
 890:	30 97       	sbiw	r30, 0x00	; 0
 892:	71 f0       	breq	.+28     	; 0x8b0
 894:	a2 83       	std	Z+2, r26	; 0x02
 896:	b3 83       	std	Z+3, r27	; 0x03
 898:	0d c0       	rjmp	.+26     	; 0x8b4
 89a:	80 81       	ld	r24, Z
 89c:	91 81       	ldd	r25, Z+1	; 0x01
 89e:	88 83       	st	Y, r24
 8a0:	99 83       	std	Y+1, r25	; 0x01
 8a2:	a2 81       	ldd	r26, Z+2	; 0x02
 8a4:	b3 81       	ldd	r27, Z+3	; 0x03
 8a6:	01 90       	ld	r0, Z+
 8a8:	f0 81       	ld	r31, Z
 8aa:	e0 2d       	mov	r30, r0
 8ac:	30 97       	sbiw	r30, 0x00	; 0
 8ae:	91 f7       	brne	.-28     	; 0x894
 8b0:	aa 83       	std	Y+2, r26	; 0x02
 8b2:	bb 83       	std	Y+3, r27	; 0x03
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	08 95       	ret

000008ba <MBX_Init>:
 8ba:	ef 92       	push	r14
 8bc:	ff 92       	push	r15
 8be:	0f 93       	push	r16
 8c0:	1f 93       	push	r17
 8c2:	cf 93       	push	r28
 8c4:	df 93       	push	r29
 8c6:	ec 01       	movw	r28, r24
 8c8:	10 e0       	ldi	r17, 0x00	; 0
 8ca:	8d 89       	ldd	r24, Y+21	; 0x15
 8cc:	18 16       	cp	r1, r24
 8ce:	a8 f4       	brcc	.+42     	; 0x8fa
 8d0:	78 e0       	ldi	r23, 0x08	; 8
 8d2:	e7 2e       	mov	r14, r23
 8d4:	f1 2c       	mov	r15, r1
 8d6:	ec 0e       	add	r14, r28
 8d8:	fd 1e       	adc	r15, r29
 8da:	06 e0       	ldi	r16, 0x06	; 6
 8dc:	10 9f       	mul	r17, r16
 8de:	90 01       	movw	r18, r0
 8e0:	11 24       	eor	r1, r1
 8e2:	8a 89       	ldd	r24, Y+18	; 0x12
 8e4:	9b 89       	ldd	r25, Y+19	; 0x13
 8e6:	82 0f       	add	r24, r18
 8e8:	93 1f       	adc	r25, r19
 8ea:	bc 01       	movw	r22, r24
 8ec:	c7 01       	movw	r24, r14
 8ee:	0e 94 ce 03 	call	0x79c
 8f2:	1f 5f       	subi	r17, 0xFF	; 255
 8f4:	8d 89       	ldd	r24, Y+21	; 0x15
 8f6:	18 17       	cp	r17, r24
 8f8:	88 f3       	brcs	.-30     	; 0x8dc
 8fa:	28 89       	ldd	r18, Y+16	; 0x10
 8fc:	39 89       	ldd	r19, Y+17	; 0x11
 8fe:	10 e0       	ldi	r17, 0x00	; 0
 900:	18 16       	cp	r1, r24
 902:	c0 f4       	brcc	.+48     	; 0x934
 904:	4a 89       	ldd	r20, Y+18	; 0x12
 906:	5b 89       	ldd	r21, Y+19	; 0x13
 908:	81 2f       	mov	r24, r17
 90a:	99 27       	eor	r25, r25
 90c:	fc 01       	movw	r30, r24
 90e:	ee 0f       	add	r30, r30
 910:	ff 1f       	adc	r31, r31
 912:	ee 0f       	add	r30, r30
 914:	ff 1f       	adc	r31, r31
 916:	e8 0f       	add	r30, r24
 918:	f9 1f       	adc	r31, r25
 91a:	e8 0f       	add	r30, r24
 91c:	f9 1f       	adc	r31, r25
 91e:	e4 0f       	add	r30, r20
 920:	f5 1f       	adc	r31, r21
 922:	24 83       	std	Z+4, r18	; 0x04
 924:	35 83       	std	Z+5, r19	; 0x05
 926:	8c 89       	ldd	r24, Y+20	; 0x14
 928:	28 0f       	add	r18, r24
 92a:	31 1d       	adc	r19, r1
 92c:	1f 5f       	subi	r17, 0xFF	; 255
 92e:	8d 89       	ldd	r24, Y+21	; 0x15
 930:	18 17       	cp	r17, r24
 932:	50 f3       	brcs	.-44     	; 0x908
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	1f 91       	pop	r17
 93a:	0f 91       	pop	r16
 93c:	ff 90       	pop	r15
 93e:	ef 90       	pop	r14
 940:	08 95       	ret

00000942 <MBX_Post>:
 942:	8f 92       	push	r8
 944:	9f 92       	push	r9
 946:	af 92       	push	r10
 948:	bf 92       	push	r11
 94a:	cf 92       	push	r12
 94c:	df 92       	push	r13
 94e:	ef 92       	push	r14
 950:	ff 92       	push	r15
 952:	0f 93       	push	r16
 954:	1f 93       	push	r17
 956:	cf 93       	push	r28
 958:	df 93       	push	r29
 95a:	7c 01       	movw	r14, r24
 95c:	6b 01       	movw	r12, r22
 95e:	4a 01       	movw	r8, r20
 960:	0e 94 c9 03 	call	0x792
 964:	ec 01       	movw	r28, r24
 966:	0e 94 e7 05 	call	0xbce
 96a:	5c 01       	movw	r10, r24
 96c:	6a 85       	ldd	r22, Y+10	; 0x0a
 96e:	7b 85       	ldd	r23, Y+11	; 0x0b
 970:	61 15       	cp	r22, r1
 972:	71 05       	cpc	r23, r1
 974:	59 f1       	breq	.+86     	; 0x9cc
 976:	8b 01       	movw	r16, r22
 978:	1a 86       	std	Y+10, r1	; 0x0a
 97a:	1b 86       	std	Y+11, r1	; 0x0b
 97c:	f7 01       	movw	r30, r14
 97e:	84 89       	ldd	r24, Z+20	; 0x14
 980:	99 27       	eor	r25, r25
 982:	ac 01       	movw	r20, r24
 984:	b6 01       	movw	r22, r12
 986:	f8 01       	movw	r30, r16
 988:	84 81       	ldd	r24, Z+4	; 0x04
 98a:	95 81       	ldd	r25, Z+5	; 0x05
 98c:	0e 94 ee 05 	call	0xbdc
 990:	b8 01       	movw	r22, r16
 992:	c7 01       	movw	r24, r14
 994:	0c 96       	adiw	r24, 0x0c	; 12
 996:	0e 94 fe 03 	call	0x7fc
 99a:	c7 01       	movw	r24, r14
 99c:	04 96       	adiw	r24, 0x04	; 4
 99e:	0e 94 1c 04 	call	0x838
 9a2:	ec 01       	movw	r28, r24
 9a4:	89 2b       	or	r24, r25
 9a6:	61 f0       	breq	.+24     	; 0x9c0
 9a8:	1c 82       	std	Y+4, r1	; 0x04
 9aa:	83 e0       	ldi	r24, 0x03	; 3
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	8e 83       	std	Y+6, r24	; 0x06
 9b0:	9f 83       	std	Y+7, r25	; 0x07
 9b2:	ce 01       	movw	r24, r28
 9b4:	0e 94 c3 01 	call	0x386
 9b8:	ce 01       	movw	r24, r28
 9ba:	0e 96       	adiw	r24, 0x0e	; 14
 9bc:	0e 94 7b 01 	call	0x2f6
 9c0:	c5 01       	movw	r24, r10
 9c2:	0e 94 eb 05 	call	0xbd6
 9c6:	80 e0       	ldi	r24, 0x00	; 0
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	1f c0       	rjmp	.+62     	; 0xa0a
 9cc:	c7 01       	movw	r24, r14
 9ce:	08 96       	adiw	r24, 0x08	; 8
 9d0:	0e 94 1c 04 	call	0x838
 9d4:	8c 01       	movw	r16, r24
 9d6:	89 2b       	or	r24, r25
 9d8:	89 f6       	brne	.-94     	; 0x97c
 9da:	81 14       	cp	r8, r1
 9dc:	91 04       	cpc	r9, r1
 9de:	31 f4       	brne	.+12     	; 0x9ec
 9e0:	c5 01       	movw	r24, r10
 9e2:	0e 94 eb 05 	call	0xbd6
 9e6:	81 e0       	ldi	r24, 0x01	; 1
 9e8:	90 e0       	ldi	r25, 0x00	; 0
 9ea:	0f c0       	rjmp	.+30     	; 0xa0a
 9ec:	ec 86       	std	Y+12, r14	; 0x0c
 9ee:	fd 86       	std	Y+13, r15	; 0x0d
 9f0:	83 e0       	ldi	r24, 0x03	; 3
 9f2:	8c 83       	std	Y+4, r24	; 0x04
 9f4:	be 01       	movw	r22, r28
 9f6:	c7 01       	movw	r24, r14
 9f8:	0e 94 ce 03 	call	0x79c
 9fc:	a4 01       	movw	r20, r8
 9fe:	62 ed       	ldi	r22, 0xD2	; 210
 a00:	75 e0       	ldi	r23, 0x05	; 5
 a02:	ce 01       	movw	r24, r28
 a04:	0e 94 a6 03 	call	0x74c
 a08:	eb cf       	rjmp	.-42     	; 0x9e0
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	1f 91       	pop	r17
 a10:	0f 91       	pop	r16
 a12:	ff 90       	pop	r15
 a14:	ef 90       	pop	r14
 a16:	df 90       	pop	r13
 a18:	cf 90       	pop	r12
 a1a:	bf 90       	pop	r11
 a1c:	af 90       	pop	r10
 a1e:	9f 90       	pop	r9
 a20:	8f 90       	pop	r8
 a22:	08 95       	ret

00000a24 <MBX_Pend>:
 a24:	8f 92       	push	r8
 a26:	9f 92       	push	r9
 a28:	af 92       	push	r10
 a2a:	bf 92       	push	r11
 a2c:	cf 92       	push	r12
 a2e:	df 92       	push	r13
 a30:	ef 92       	push	r14
 a32:	ff 92       	push	r15
 a34:	0f 93       	push	r16
 a36:	1f 93       	push	r17
 a38:	cf 93       	push	r28
 a3a:	df 93       	push	r29
 a3c:	7c 01       	movw	r14, r24
 a3e:	6b 01       	movw	r12, r22
 a40:	4a 01       	movw	r8, r20
 a42:	0e 94 c9 03 	call	0x792
 a46:	ec 01       	movw	r28, r24
 a48:	0e 94 e7 05 	call	0xbce
 a4c:	5c 01       	movw	r10, r24
 a4e:	c7 01       	movw	r24, r14
 a50:	0c 96       	adiw	r24, 0x0c	; 12
 a52:	0e 94 1c 04 	call	0x838
 a56:	8c 01       	movw	r16, r24
 a58:	89 2b       	or	r24, r25
 a5a:	29 f1       	breq	.+74     	; 0xaa6
 a5c:	f7 01       	movw	r30, r14
 a5e:	84 89       	ldd	r24, Z+20	; 0x14
 a60:	99 27       	eor	r25, r25
 a62:	f8 01       	movw	r30, r16
 a64:	24 81       	ldd	r18, Z+4	; 0x04
 a66:	35 81       	ldd	r19, Z+5	; 0x05
 a68:	ac 01       	movw	r20, r24
 a6a:	b9 01       	movw	r22, r18
 a6c:	c6 01       	movw	r24, r12
 a6e:	0e 94 ee 05 	call	0xbdc
 a72:	c7 01       	movw	r24, r14
 a74:	0e 94 1c 04 	call	0x838
 a78:	ec 01       	movw	r28, r24
 a7a:	89 2b       	or	r24, r25
 a7c:	a1 f1       	breq	.+104    	; 0xae6
 a7e:	1c 82       	std	Y+4, r1	; 0x04
 a80:	83 e0       	ldi	r24, 0x03	; 3
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	8e 83       	std	Y+6, r24	; 0x06
 a86:	9f 83       	std	Y+7, r25	; 0x07
 a88:	0a 87       	std	Y+10, r16	; 0x0a
 a8a:	1b 87       	std	Y+11, r17	; 0x0b
 a8c:	ce 01       	movw	r24, r28
 a8e:	0e 94 c3 01 	call	0x386
 a92:	ce 01       	movw	r24, r28
 a94:	0e 96       	adiw	r24, 0x0e	; 14
 a96:	0e 94 7b 01 	call	0x2f6
 a9a:	c5 01       	movw	r24, r10
 a9c:	0e 94 eb 05 	call	0xbd6
 aa0:	80 e0       	ldi	r24, 0x00	; 0
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	26 c0       	rjmp	.+76     	; 0xaf2
 aa6:	81 14       	cp	r8, r1
 aa8:	91 04       	cpc	r9, r1
 aaa:	31 f4       	brne	.+12     	; 0xab8
 aac:	c5 01       	movw	r24, r10
 aae:	0e 94 eb 05 	call	0xbd6
 ab2:	81 e0       	ldi	r24, 0x01	; 1
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	1d c0       	rjmp	.+58     	; 0xaf2
 ab8:	97 01       	movw	r18, r14
 aba:	2c 5f       	subi	r18, 0xFC	; 252
 abc:	3f 4f       	sbci	r19, 0xFF	; 255
 abe:	2c 87       	std	Y+12, r18	; 0x0c
 ac0:	3d 87       	std	Y+13, r19	; 0x0d
 ac2:	83 e0       	ldi	r24, 0x03	; 3
 ac4:	8c 83       	std	Y+4, r24	; 0x04
 ac6:	be 01       	movw	r22, r28
 ac8:	c9 01       	movw	r24, r18
 aca:	0e 94 ce 03 	call	0x79c
 ace:	a4 01       	movw	r20, r8
 ad0:	62 ed       	ldi	r22, 0xD2	; 210
 ad2:	75 e0       	ldi	r23, 0x05	; 5
 ad4:	ce 01       	movw	r24, r28
 ad6:	0e 94 a6 03 	call	0x74c
 ada:	c5 01       	movw	r24, r10
 adc:	0e 94 eb 05 	call	0xbd6
 ae0:	81 e0       	ldi	r24, 0x01	; 1
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	06 c0       	rjmp	.+12     	; 0xaf2
 ae6:	b8 01       	movw	r22, r16
 ae8:	c7 01       	movw	r24, r14
 aea:	08 96       	adiw	r24, 0x08	; 8
 aec:	0e 94 fe 03 	call	0x7fc
 af0:	d4 cf       	rjmp	.-88     	; 0xa9a
 af2:	df 91       	pop	r29
 af4:	cf 91       	pop	r28
 af6:	1f 91       	pop	r17
 af8:	0f 91       	pop	r16
 afa:	ff 90       	pop	r15
 afc:	ef 90       	pop	r14
 afe:	df 90       	pop	r13
 b00:	cf 90       	pop	r12
 b02:	bf 90       	pop	r11
 b04:	af 90       	pop	r10
 b06:	9f 90       	pop	r9
 b08:	8f 90       	pop	r8
 b0a:	08 95       	ret

00000b0c <MBX_Flush>:
 b0c:	8f 92       	push	r8
 b0e:	9f 92       	push	r9
 b10:	af 92       	push	r10
 b12:	bf 92       	push	r11
 b14:	cf 92       	push	r12
 b16:	df 92       	push	r13
 b18:	ef 92       	push	r14
 b1a:	ff 92       	push	r15
 b1c:	0f 93       	push	r16
 b1e:	1f 93       	push	r17
 b20:	cf 93       	push	r28
 b22:	df 93       	push	r29
 b24:	7c 01       	movw	r14, r24
 b26:	0e 94 e7 05 	call	0xbce
 b2a:	4c 01       	movw	r8, r24
 b2c:	fc e0       	ldi	r31, 0x0C	; 12
 b2e:	cf 2e       	mov	r12, r31
 b30:	d1 2c       	mov	r13, r1
 b32:	ce 0c       	add	r12, r14
 b34:	df 1c       	adc	r13, r15
 b36:	e1 e0       	ldi	r30, 0x01	; 1
 b38:	ae 2e       	mov	r10, r30
 b3a:	b1 2c       	mov	r11, r1
 b3c:	c6 01       	movw	r24, r12
 b3e:	0e 94 1c 04 	call	0x838
 b42:	8c 01       	movw	r16, r24
 b44:	89 2b       	or	r24, r25
 b46:	f1 f0       	breq	.+60     	; 0xb84
 b48:	c7 01       	movw	r24, r14
 b4a:	0e 94 1c 04 	call	0x838
 b4e:	ec 01       	movw	r28, r24
 b50:	00 97       	sbiw	r24, 0x00	; 0
 b52:	91 f0       	breq	.+36     	; 0xb78
 b54:	1c 82       	std	Y+4, r1	; 0x04
 b56:	ae 82       	std	Y+6, r10	; 0x06
 b58:	bf 82       	std	Y+7, r11	; 0x07
 b5a:	0a 87       	std	Y+10, r16	; 0x0a
 b5c:	1b 87       	std	Y+11, r17	; 0x0b
 b5e:	0e 96       	adiw	r24, 0x0e	; 14
 b60:	0e 94 7b 01 	call	0x2f6
 b64:	ce 01       	movw	r24, r28
 b66:	0e 94 c3 01 	call	0x386
 b6a:	c6 01       	movw	r24, r12
 b6c:	0e 94 1c 04 	call	0x838
 b70:	8c 01       	movw	r16, r24
 b72:	89 2b       	or	r24, r25
 b74:	49 f7       	brne	.-46     	; 0xb48
 b76:	06 c0       	rjmp	.+12     	; 0xb84
 b78:	b8 01       	movw	r22, r16
 b7a:	c7 01       	movw	r24, r14
 b7c:	08 96       	adiw	r24, 0x08	; 8
 b7e:	0e 94 fe 03 	call	0x7fc
 b82:	dc cf       	rjmp	.-72     	; 0xb3c
 b84:	c4 01       	movw	r24, r8
 b86:	0e 94 eb 05 	call	0xbd6
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	1f 91       	pop	r17
 b90:	0f 91       	pop	r16
 b92:	ff 90       	pop	r15
 b94:	ef 90       	pop	r14
 b96:	df 90       	pop	r13
 b98:	cf 90       	pop	r12
 b9a:	bf 90       	pop	r11
 b9c:	af 90       	pop	r10
 b9e:	9f 90       	pop	r9
 ba0:	8f 90       	pop	r8
 ba2:	08 95       	ret

00000ba4 <mbx_tout_clb>:
 ba4:	0f 93       	push	r16
 ba6:	1f 93       	push	r17
 ba8:	8b 01       	movw	r16, r22
 baa:	86 e0       	ldi	r24, 0x06	; 6
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	fb 01       	movw	r30, r22
 bb0:	86 83       	std	Z+6, r24	; 0x06
 bb2:	97 83       	std	Z+7, r25	; 0x07
 bb4:	14 82       	std	Z+4, r1	; 0x04
 bb6:	84 85       	ldd	r24, Z+12	; 0x0c
 bb8:	95 85       	ldd	r25, Z+13	; 0x0d
 bba:	0e 94 38 04 	call	0x870
 bbe:	c8 01       	movw	r24, r16
 bc0:	0e 94 c3 01 	call	0x386
 bc4:	80 e0       	ldi	r24, 0x00	; 0
 bc6:	90 e0       	ldi	r25, 0x00	; 0
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	08 95       	ret

00000bce <INT_Disable>:
 bce:	8f b7       	in	r24, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	08 95       	ret

00000bd4 <INT_Enable>:
 bd4:	18 95       	reti

00000bd6 <INT_Restore>:
 bd6:	87 ff       	sbrs	r24, 7
 bd8:	08 95       	ret
 bda:	18 95       	reti

00000bdc <memcpy>:
 bdc:	fb 01       	movw	r30, r22
 bde:	dc 01       	movw	r26, r24
 be0:	02 c0       	rjmp	.+4      	; 0xbe6

00000be2 <.memcpy_loop>:
 be2:	01 90       	ld	r0, Z+
 be4:	0d 92       	st	X+, r0

00000be6 <.memcpy_start>:
 be6:	41 50       	subi	r20, 0x01	; 1
 be8:	50 40       	sbci	r21, 0x00	; 0
 bea:	d8 f7       	brcc	.-10     	; 0xbe2
 bec:	08 95       	ret

00000bee <_exit>:
 bee:	ff cf       	rjmp	.-2      	; 0xbee
